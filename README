Colección de paquetes ROS que intervienen en el control del robot oruga del GRVC.

- serialcomm: Este paquete implementa una librería que nos simplifica las comunicaciones con el puerto serie. Nos abstrae del más bajo nivel hardware y nos ofrece herramientas que permiten la exclusión mutua en regiones de memoria compartida.

- oruga_msgs: En este paquete se definen los tipos de datos propios que usaremos en nuestro sistema ROS. Por el momento únicamente se incluye OrugaData, que se define de la siguiente manera:

  -- uint8 code: correspondiente a los 8 bits del código de operación del protocolo.

  -- uint8[] value: vector de longitud variable de elementos de 8 bits, correspondientes a los valores que siguen al código de operación en la trama definida por el protocolo.

- oruga_bringup: Ideado para contener todo lo necesario en la inicialización del robot. Implementa los siguientes nodos:

  -- oruga: nodo que gestiona las comunicaciones con el puerto serie haciendo uso de la librería serialcomm. Por un lado recibe mensajes del tipo OrugaData de la red ROS (en /oruga/command) para generar y enviar a la placa de control la trama correspondiente según el protocolo. Por otro lado, lee del puerto serie los mensajes de la placa de control y los traduce al tipo OrugaData para ponerlos a disposición del resto de nodos (en /oruga/data).

  -- heartbeat: este nodo envía periódicamente un mensaje para conmutar los leds de la placa de control, de manera que es fácil visualizar en el robot si las comunicaciones con ROS están activas o no.

- oruga_teleop: Contiene el software de teleoperación del robot. A modo de ejemplo se han escrito dos nodos teleoperadores, uno con teclado y otro con joystick. En ambos casos se procede de manera parecida: se lee del dispositivo -teclado o joystick- y se envía al nodo oruga el mensaje de tipo OrugaData que corresponda.

- pi_dependencies: De uso exclusivo dentro de la Raspberry Pi para la resolución de dependencias rotas.

